# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только
# чисел. Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и
# заполнять список. Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не
# остановит работу скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный
# список выводится на экран.Подсказка: для данного задания примем, что пользователь может вводить только
# числа и строки. При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента
# и вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю
# ввести текст (не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна
# завершаться.

class MyOwnException(Exception):
    def __init__(self, text):
        self.text = text


def my_funct():
    new_str = ''
    check_val = 1
    while check_val == 1:
        a = input('Введите элемент строки и нажмите Enter. Для прекращения заполнения строки введите СТОП: ')
        if a != 'СТОП':
            try:
                if a.isdigit() == True:
                    new_str = new_str + a
                else:
                    raise MyOwnException(
                        'Введено не число или не целое число. В итоговую строку попадут только целые числа')
            except MyOwnException as err:
                print(err)
        else:
            return new_str


print(my_funct())
